
LAB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a2  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007df  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c0  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027c  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000022da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_init>:


#include "adc.h"

void ADC_init(void) {
	ADMUX = (1 << REFS0); // AVcc con capacitor externo en AREF
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // Habilitar ADC, prescaler 64
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  8c:	08 95       	ret

0000008e <ADC_read>:
}

uint16_t ADC_read(uint8_t ch) {
	ADMUX = (ADMUX & 0xF0) | (ch & 0x0F);
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	90 81       	ld	r25, Z
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	89 2b       	or	r24, r25
  9a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  aa:	86 fd       	sbrc	r24, 6
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <ADC_read+0x18>
	return ADC;
  ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  b6:	08 95       	ret

000000b8 <main>:
#include "adc.h"
#include "pwm.h"
#include "utils.h"
 
int main(void) {
	ADC_init();
  b8:	0e 94 40 00 	call	0x80	; 0x80 <ADC_init>
	PWM1_init();
  bc:	0e 94 c4 00 	call	0x188	; 0x188 <PWM1_init>
	PWM0_init();
  c0:	0e 94 de 00 	call	0x1bc	; 0x1bc <PWM0_init>

	while (1) {
		uint16_t pot1 = ADC_read(0); // A0 - Servo 1
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_read>
  ca:	3c 01       	movw	r6, r24
		uint16_t pot2 = ADC_read(1); // A1 - Servo 2
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_read>
  d2:	4c 01       	movw	r8, r24
		uint16_t pot3 = ADC_read(2); // A2 - LED PWM
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_read>
  da:	ec 01       	movw	r28, r24

		set_PWM1A(map(pot1, 0, 1023, 1000, 4000)); // Servo 1 en D9 (OC1A)
  dc:	b3 01       	movw	r22, r6
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	1f 92       	push	r1
  e4:	1f 92       	push	r1
  e6:	0f 2e       	mov	r0, r31
  e8:	ff e0       	ldi	r31, 0x0F	; 15
  ea:	6f 2e       	mov	r6, r31
  ec:	f0 2d       	mov	r31, r0
  ee:	6f 92       	push	r6
  f0:	0f 2e       	mov	r0, r31
  f2:	f0 ea       	ldi	r31, 0xA0	; 160
  f4:	7f 2e       	mov	r7, r31
  f6:	f0 2d       	mov	r31, r0
  f8:	7f 92       	push	r7
  fa:	0f 2e       	mov	r0, r31
  fc:	f8 ee       	ldi	r31, 0xE8	; 232
  fe:	af 2e       	mov	r10, r31
 100:	f3 e0       	ldi	r31, 0x03	; 3
 102:	bf 2e       	mov	r11, r31
 104:	c1 2c       	mov	r12, r1
 106:	d1 2c       	mov	r13, r1
 108:	f0 2d       	mov	r31, r0
 10a:	ee 24       	eor	r14, r14
 10c:	ea 94       	dec	r14
 10e:	13 e0       	ldi	r17, 0x03	; 3
 110:	f1 2e       	mov	r15, r17
 112:	00 e0       	ldi	r16, 0x00	; 0
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	a9 01       	movw	r20, r18
 11c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <map>
 120:	cb 01       	movw	r24, r22
 122:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <set_PWM1A>
		
		set_PWM1B(map(pot2, 0, 1023, 1000, 4000)); // Servo 2 en D10 (OC1B)
 126:	b4 01       	movw	r22, r8
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	1f 92       	push	r1
 12e:	1f 92       	push	r1
 130:	6f 92       	push	r6
 132:	7f 92       	push	r7
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	a9 01       	movw	r20, r18
 13a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <map>
 13e:	cb 01       	movw	r24, r22
 140:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <set_PWM1B>
		
		set_PWM0A(map(pot3, 0, 1023, 0, 255));     // LED en D6 (OC0A)
 144:	be 01       	movw	r22, r28
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	1f 92       	push	r1
 14c:	1f 92       	push	r1
 14e:	1f 92       	push	r1
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	2f 93       	push	r18
 154:	a1 2c       	mov	r10, r1
 156:	b1 2c       	mov	r11, r1
 158:	65 01       	movw	r12, r10
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	a9 01       	movw	r20, r18
 160:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <map>
 164:	86 2f       	mov	r24, r22
 166:	0e 94 e6 00 	call	0x1cc	; 0x1cc <set_PWM0A>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	83 ed       	ldi	r24, 0xD3	; 211
 16c:	90 e3       	ldi	r25, 0x30	; 48
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0xb6>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xbc>
 174:	00 00       	nop
 176:	8d b7       	in	r24, 0x3d	; 61
 178:	9e b7       	in	r25, 0x3e	; 62
 17a:	0c 96       	adiw	r24, 0x0c	; 12
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	9e bf       	out	0x3e, r25	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	8d bf       	out	0x3d, r24	; 61
 186:	9e cf       	rjmp	.-196    	; 0xc4 <main+0xc>

00000188 <PWM1_init>:


#include "pwm.h"

void PWM1_init(void) {
	DDRB |= (1 << PB1) | (1 << PB2); // OC1A (D9), OC1B (D10)
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	86 60       	ori	r24, 0x06	; 6
 18c:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 18e:	82 ea       	ldi	r24, 0xA2	; 162
 190:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Modo 14 (Fast PWM), prescaler 8
 194:	8a e1       	ldi	r24, 0x1A	; 26
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 40000; // TOP = 20 ms (50Hz)
 19a:	80 e4       	ldi	r24, 0x40	; 64
 19c:	9c e9       	ldi	r25, 0x9C	; 156
 19e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1a6:	08 95       	ret

000001a8 <set_PWM1A>:
}

void set_PWM1A(uint16_t value) {
	OCR1A = value;
 1a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1b0:	08 95       	ret

000001b2 <set_PWM1B>:
}

void set_PWM1B(uint16_t value) {
	OCR1B = value;
 1b2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1ba:	08 95       	ret

000001bc <PWM0_init>:
}

void PWM0_init(void) {
	DDRD |= (1 << PD6); // OC0A (D6)
 1bc:	8a b1       	in	r24, 0x0a	; 10
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00); // Fast PWM, OC0A habilitado
 1c2:	83 e8       	ldi	r24, 0x83	; 131
 1c4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01); // Prescaler 8
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	85 bd       	out	0x25, r24	; 37
 1ca:	08 95       	ret

000001cc <set_PWM0A>:
}

void set_PWM0A(uint8_t value) {
	OCR0A = value;
 1cc:	87 bd       	out	0x27, r24	; 39
 1ce:	08 95       	ret

000001d0 <map>:
 * Created: 8/04/2025 13:03:28
 *  Author: Rodrigo Lara
 */ 
#include "utils.h"

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 1d0:	4f 92       	push	r4
 1d2:	5f 92       	push	r5
 1d4:	6f 92       	push	r6
 1d6:	7f 92       	push	r7
 1d8:	af 92       	push	r10
 1da:	bf 92       	push	r11
 1dc:	cf 92       	push	r12
 1de:	df 92       	push	r13
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	29 01       	movw	r4, r18
 1f2:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 1f4:	9b 01       	movw	r18, r22
 1f6:	ac 01       	movw	r20, r24
 1f8:	24 19       	sub	r18, r4
 1fa:	35 09       	sbc	r19, r5
 1fc:	46 09       	sbc	r20, r6
 1fe:	57 09       	sbc	r21, r7
 200:	89 89       	ldd	r24, Y+17	; 0x11
 202:	9a 89       	ldd	r25, Y+18	; 0x12
 204:	ab 89       	ldd	r26, Y+19	; 0x13
 206:	bc 89       	ldd	r27, Y+20	; 0x14
 208:	bc 01       	movw	r22, r24
 20a:	cd 01       	movw	r24, r26
 20c:	6a 19       	sub	r22, r10
 20e:	7b 09       	sbc	r23, r11
 210:	8c 09       	sbc	r24, r12
 212:	9d 09       	sbc	r25, r13
 214:	0e 94 29 01 	call	0x252	; 0x252 <__mulsi3>
 218:	a8 01       	movw	r20, r16
 21a:	97 01       	movw	r18, r14
 21c:	24 19       	sub	r18, r4
 21e:	35 09       	sbc	r19, r5
 220:	46 09       	sbc	r20, r6
 222:	57 09       	sbc	r21, r7
 224:	0e 94 39 01 	call	0x272	; 0x272 <__divmodsi4>
 228:	c6 01       	movw	r24, r12
 22a:	b5 01       	movw	r22, r10
 22c:	62 0f       	add	r22, r18
 22e:	73 1f       	adc	r23, r19
 230:	84 1f       	adc	r24, r20
 232:	95 1f       	adc	r25, r21
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	bf 90       	pop	r11
 246:	af 90       	pop	r10
 248:	7f 90       	pop	r7
 24a:	6f 90       	pop	r6
 24c:	5f 90       	pop	r5
 24e:	4f 90       	pop	r4
 250:	08 95       	ret

00000252 <__mulsi3>:
 252:	db 01       	movw	r26, r22
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muluhisi3>
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	a2 9f       	mul	r26, r18
 262:	80 0d       	add	r24, r0
 264:	91 1d       	adc	r25, r1
 266:	a3 9f       	mul	r26, r19
 268:	90 0d       	add	r25, r0
 26a:	b2 9f       	mul	r27, r18
 26c:	90 0d       	add	r25, r0
 26e:	11 24       	eor	r1, r1
 270:	08 95       	ret

00000272 <__divmodsi4>:
 272:	05 2e       	mov	r0, r21
 274:	97 fb       	bst	r25, 7
 276:	1e f4       	brtc	.+6      	; 0x27e <__divmodsi4+0xc>
 278:	00 94       	com	r0
 27a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__negsi2>
 27e:	57 fd       	sbrc	r21, 7
 280:	07 d0       	rcall	.+14     	; 0x290 <__divmodsi4_neg2>
 282:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__udivmodsi4>
 286:	07 fc       	sbrc	r0, 7
 288:	03 d0       	rcall	.+6      	; 0x290 <__divmodsi4_neg2>
 28a:	4e f4       	brtc	.+18     	; 0x29e <__divmodsi4_exit>
 28c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__negsi2>

00000290 <__divmodsi4_neg2>:
 290:	50 95       	com	r21
 292:	40 95       	com	r20
 294:	30 95       	com	r19
 296:	21 95       	neg	r18
 298:	3f 4f       	sbci	r19, 0xFF	; 255
 29a:	4f 4f       	sbci	r20, 0xFF	; 255
 29c:	5f 4f       	sbci	r21, 0xFF	; 255

0000029e <__divmodsi4_exit>:
 29e:	08 95       	ret

000002a0 <__negsi2>:
 2a0:	90 95       	com	r25
 2a2:	80 95       	com	r24
 2a4:	70 95       	com	r23
 2a6:	61 95       	neg	r22
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	8f 4f       	sbci	r24, 0xFF	; 255
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	08 95       	ret

000002b0 <__muluhisi3>:
 2b0:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 2b4:	a5 9f       	mul	r26, r21
 2b6:	90 0d       	add	r25, r0
 2b8:	b4 9f       	mul	r27, r20
 2ba:	90 0d       	add	r25, r0
 2bc:	a4 9f       	mul	r26, r20
 2be:	80 0d       	add	r24, r0
 2c0:	91 1d       	adc	r25, r1
 2c2:	11 24       	eor	r1, r1
 2c4:	08 95       	ret

000002c6 <__udivmodsi4>:
 2c6:	a1 e2       	ldi	r26, 0x21	; 33
 2c8:	1a 2e       	mov	r1, r26
 2ca:	aa 1b       	sub	r26, r26
 2cc:	bb 1b       	sub	r27, r27
 2ce:	fd 01       	movw	r30, r26
 2d0:	0d c0       	rjmp	.+26     	; 0x2ec <__udivmodsi4_ep>

000002d2 <__udivmodsi4_loop>:
 2d2:	aa 1f       	adc	r26, r26
 2d4:	bb 1f       	adc	r27, r27
 2d6:	ee 1f       	adc	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	a2 17       	cp	r26, r18
 2dc:	b3 07       	cpc	r27, r19
 2de:	e4 07       	cpc	r30, r20
 2e0:	f5 07       	cpc	r31, r21
 2e2:	20 f0       	brcs	.+8      	; 0x2ec <__udivmodsi4_ep>
 2e4:	a2 1b       	sub	r26, r18
 2e6:	b3 0b       	sbc	r27, r19
 2e8:	e4 0b       	sbc	r30, r20
 2ea:	f5 0b       	sbc	r31, r21

000002ec <__udivmodsi4_ep>:
 2ec:	66 1f       	adc	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	88 1f       	adc	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	1a 94       	dec	r1
 2f6:	69 f7       	brne	.-38     	; 0x2d2 <__udivmodsi4_loop>
 2f8:	60 95       	com	r22
 2fa:	70 95       	com	r23
 2fc:	80 95       	com	r24
 2fe:	90 95       	com	r25
 300:	9b 01       	movw	r18, r22
 302:	ac 01       	movw	r20, r24
 304:	bd 01       	movw	r22, r26
 306:	cf 01       	movw	r24, r30
 308:	08 95       	ret

0000030a <__umulhisi3>:
 30a:	a2 9f       	mul	r26, r18
 30c:	b0 01       	movw	r22, r0
 30e:	b3 9f       	mul	r27, r19
 310:	c0 01       	movw	r24, r0
 312:	a3 9f       	mul	r26, r19
 314:	70 0d       	add	r23, r0
 316:	81 1d       	adc	r24, r1
 318:	11 24       	eor	r1, r1
 31a:	91 1d       	adc	r25, r1
 31c:	b2 9f       	mul	r27, r18
 31e:	70 0d       	add	r23, r0
 320:	81 1d       	adc	r24, r1
 322:	11 24       	eor	r1, r1
 324:	91 1d       	adc	r25, r1
 326:	08 95       	ret

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
